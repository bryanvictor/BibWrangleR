strsplit(numbers.string[1], split="")
str(numbers.string)
?as.string
length(numbers.string[1])
length(numbers.string[2])
as.character(numbers.string[2])
strsplit(as.character(numbers.string[2]), "")
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
head(numbers.string)
numbers.string <- data.frame(numbers.string)
runif
?runif
benford.sim <- runif(10000, 0, 1000000000)
numbers <- sample(benford.sim, 1000000, replace = TRUE)
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))numbers.string.split <- lapply(numbers, function(x) fixed=TRUE)
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
numbers.string <- data.frame(numbers.string)
benford.sim <- runif(1000, 0, 1000000000)
numbers <- sample(benford.sim, 1000000, replace = TRUE)
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
benford.sim <- runif(100000, 0, 1000000000)
numbers <- sample(benford.sim, 1000, replace = TRUE)
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
numbers.string <- data.frame(numbers.string)
str(numbers.string)
numbers.string
unlist(numbers.string)
numbers.string[[1]]
numbers.string[[1]][[1]]
numbers.string[[1]][1]
numbers.string[[1[1]]]
numbers.string[[1]]
x <- numbers.string[[1]]
x[1]
x[[1]]
x[[1]][[1]]
numbers.string[[1]][[1]]
numbers.string[[[1]]][[1]]
numbers.string[[1]][[1]]
numbers.string[[1]][[1]][[1]]
numbers.string[[2]][[2]][[1]]
numbers.string[[2]][[1]][[1]]
x <- numbers.string[[i]][[1]][[1]]
for(i in 1:length(numbers.string)){
x <- numbers.string[[i]][[1]][[1]]
}
ls()
length(x)
x <- for(i in 1:length(numbers.string)){
x <- numbers.string[[i]][[1]][[1]]
}
x
x <- for(i in 1:length(numbers.string)){
x.new <<- numbers.string[[i]][[1]][[1]]
}
ls()
length(x.new)
x
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
head(numbers.string)
length(numbers.string)
numbers.string[[1]][[1]][[1]]
numbers.string[[2]][[1]][[1]]
numbers.string[[3]][[1]][[1]]
x.new <- rep(NA, 1000)
x <- for(i in 1:length(numbers.string)){
x.new <<- numbers.string[[i]][[1]][[1]]
}
length(x.new)
x.new <- rep(NA, 1000)
x <- for(i in 1:length(numbers.string)){
x.new[i] <<- numbers.string[[i]][[1]][[1]]
}
x.new <- rep(NA, 1000)
x <- for(i in 1:length(numbers.string)){
x.new[i] <- numbers.string[[i]][[1]][[1]]
}
length(x.new)
table(x.new)
plot(x.new)
hist(x.new)
?plot(table(x.new))
plot(table(x.new))
tapply(table(x.new), 1, mean)
mean(table(x.new))
?hline
numbers.table <- table(x.new)
numbers.table
ggplot(numbers.table)
library(ggplot2)
ggplot(numbers.table)
numbers.string
x.new
as.factor(x.new)
x.new <- as.factor(x.new)
plot(x.new)
qplot(x.new)
ggplot(x.new)
qplot(x.new)
qplot(x.new) + geom_line(aes(yintercept = mean(table(x.new))))
qplot(x.new) + geom_line(aes(y = mean(table(x.new)), x = 1))
qplot(x.new) + geom_line(aes(y = mean(table(x.new))))
mean(table(x.new))
qplot(x.new) + + geom_hline(aes(yintercept=mean(table(x.new))))
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new)))
)
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new))))
benford.sim <- runif(100000, 0, 1000000000)
numbers <- sample(benford.sim, 100000, replace = TRUE)
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
x.new <- rep(NA, 100000)
x <- for(i in 1:length(numbers.string)){
x.new[i] <- numbers.string[[i]][[1]][[1]]
}
x.new <- as.factor(x.new)
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new))))
benford.sim <- runif(100000, 0, 1000000000)
numbers <- sample(benford.sim, 1000000, replace = TRUE)
numbers.string <- lapply(numbers, function(x) strsplit(as.character(x), split = ""))
x.new <- rep(NA, 1000000)
x <- for(i in 1:length(numbers.string)){
x.new[i] <- numbers.string[[i]][[1]][[1]]
}
x.new <- as.factor(x.new)
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new))))
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new)))) + xlab("Numbers")
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new)))) + xlab("Numbers") + ylab("Count")
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new)))) +
xlab("Numbers") + ylab("Count") + main("Benford's Law")
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new)))) +
xlab("Numbers") + ylab("Count") + ggtitle("Benford's Law")
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new))), colour="red") +
xlab("Numbers") + ylab("Count") + ggtitle("Benford's Law")
qplot(x.new) + geom_hline(aes(yintercept=mean(table(x.new))), colour="red") +
xlab("Numbers") + ylab("Count") + ggtitle("Benford's Law") + ylim(0,150000)
rm(list=ls())
library(dplyr)
library(reshape2)
df <- load("/Users/beperron/Git/mijjTab/COMPLETE.RData")
df <- COMPLETE; rm(COMPLETE)
df <- data.frame(lapply(df, function(x) as.numeric(x))) # Change all variables to numeric
df <- select(df, -(Q42aPastProEmo:Q45mCurrentProAOD),
-(LastUpdatedBy:Tablet.x),
-(Q15a1Offense1Date:Q15N4Offense14AdjudDate),
-(Q5aAxis1:Q6gMedication8),
-(Q30aNumHospMH:Q33HospAOD12Mos),
-(Q5Child:Q5aNumChild),
-(Q6aNumHI:Q12SmokeWake),
-YouthentryID, -DateofExtract, -ExtractorName,
-Q1aOtherGenderText, -Tablet.y, -Primary,
-Q1Gender, -Q77GradesRepeat, -Q7AgeFirstMeds)
#______________________Create Factor Variables for Melting_______________________________
# All categorical variables should be changed to factors
# Only factor variables in this data file are caseID, gender, and race
df$caseID <- as.factor(c(1:nrow(df)))
df$race <- as.numeric(df$Q2Race); df$Q2Race <- NULL
df$race <- ifelse(df$race == 1 | df$race == 4, "Black", #Black
ifelse(df$race == 3, "White", "Other"))
# Create fictitious gender data
df$gender <- sample(c("male", "male", "female"), nrow(df), replace=TRUE)
cat.df <- select(df, caseID, race, gender)
cont.df <- select(df, -caseID, -race, -gender)
#______________________Recode Continuous Variables for Analysis____________________________
#Create reduced data set of variables to recode
contTemp.df <- select(df, Q34IntSuptEmo:Q47NeedProAOD, Q74Needs)
contTemp.df <- data.frame(lapply(contTemp.df, function(x) ifelse(x == 1, 0, 1)))
#Unselect out original variables and cbind to recoded variables
cont.df <- select(cont.df, -(Q34IntSuptEmo:Q47NeedProAOD), -Q74Needs)
cont.df <- cbind(cont.df, contTemp.df)
#Listwise deletion
cont.df <- cont.df[complete.cases(cont.df),]
dim(cont.df)
cont.df <- data.frame(lapply(cont.df, function(x) ifelse(x == 999, NA, x)))
cont.df
dev.off()
ls()
cont.df
str(cont.df)
dim(cont.df)
names(cont.df)
final.df <- select(cont.df, Q1Age:Q6HeadInjury, Q72ProgLngth,
A_AlcoholDrugUse:F_ThoughtDistrubBin, Simulants:Miscellaneous,
any.sud.Dx:any.psychotic.Dx, Q1CurrentMHServ,Q9CurrentlyRecHelpforDrugs,
Q16AgeFirstArrest, Q17AgeFirstPlacement, Q20TotalMonthsPlacements,
Q19TotalMonthsCurrPlace, Q21DHSRiskLevel, Q41PrescripEmo,
Q46NeedProEmo, Q47NeedProAOD))
final.df <- select(cont.df, Q1Age:Q6HeadInjury, Q72ProgLngth,
A_AlcoholDrugUse:F_ThoughtDistrubBin, Simulants:Miscellaneous,
any.sud.Dx:any.psychotic.Dx, Q1CurrentMHServ,Q9CurrentlyRecHelpforDrugs,
Q16AgeFirstArrest, Q17AgeFirstPlacement, Q20TotalMonthsPlacements,
Q19TotalMonthsCurrPlace, Q21DHSRiskLevel, Q41PrescripEmo,
Q46NeedProEmo, Q47NeedProAOD)
final.df <- select(cont.df, Q1Age:Q6HeadInjury, Q72ProgLngth,
A_AlcoholDrugUse:F_ThoughtDisturbBin, Simulants:Miscellaneous,
any.sud.Dx:any.psychotic.Dx, Q1CurrentMHServ,Q9CurrentlyRecHelpforDrugs,
Q16AgeFirstArrest, Q17AgeFirstPlacement, Q20TotalMonthsPlacements,
Q19TotalMonthsCurrPlace, Q21DHSRiskLevel, Q41PrescripEmo,
Q46NeedProEmo, Q47NeedProAOD)
final.df <- select(cont.df, Q1Age:Q6HeadInjury, Q72ProgLngth,
A_AlcoholDrugUse:F_ThoughtDisturbBin, Stimulants:Miscellaneous,
any.sud.Dx:any.psychotic.Dx, Q1CurrentMHServ,Q9CurrentlyRecHelpforDrugs,
Q16AgeFirstArrest, Q17AgeFirstPlacement, Q20TotalMonthsPlacements,
Q19TotalMonthsCurrPlace, Q21DHSRiskLevel, Q41PrescripEmo,
Q46NeedProEmo, Q47NeedProAOD)
final.df <- select(cont.df, Q1Age:Q6HeadInjury, Q72ProgLngth,
A_AlcoholDrugUse:F_ThoughtDisturbBin, Stimulants:Miscellaneous,
any.sud.Dx:any.psychotic.Dx, Q1CurrentMHServ,Q9CurrentlyRecHelpforDrugs,
Q16AgeFirstArrest, Q17AgeFirstPlacement, Q20TotalMonthsPlacements,
Q19MonthsCurrPlace, Q21DHSRiskLevel, Q41PrescripEmo,
Q46NeedProEmo, Q47NeedProAOD)
dim(final.df)
names(final.df)
str(final.df)
rm(list=ls())
library(dplyr)
library(reshape2)
df <- load("/Users/beperron/Git/mijjTab/COMPLETE.RData")
df <- COMPLETE; rm(COMPLETE)
df <- data.frame(lapply(df, function(x) as.numeric(x))) # Change all variables to numeric
df <- select(df, -(Q42aPastProEmo:Q45mCurrentProAOD),
-(LastUpdatedBy:Tablet.x),
-(Q15a1Offense1Date:Q15N4Offense14AdjudDate),
-(Q5aAxis1:Q6gMedication8),
-(Q30aNumHospMH:Q33HospAOD12Mos),
-(Q5Child:Q5aNumChild),
-(Q6aNumHI:Q12SmokeWake),
-YouthentryID, -DateofExtract, -ExtractorName,
-Q1aOtherGenderText, -Tablet.y, -Primary,
-Q1Gender, -Q77GradesRepeat, -Q7AgeFirstMeds)
names(df)
rm(list=ls())
library(dplyr)
library(reshape2)
df <- load("/Users/beperron/Git/mijjTab/COMPLETE.RData")
df <- COMPLETE; rm(COMPLETE)
df <- data.frame(lapply(df, function(x) as.numeric(x))) # Change all variables to numeric
df <- select(df, -(Q42aPastProEmo:Q45mCurrentProAOD),
-(LastUpdatedBy:Tablet.x),
-(Q15a1Offense1Date:Q15N4Offense14AdjudDate),
-(Q5aAxis1:Q6gMedication8),
-(Q30aNumHospMH:Q33HospAOD12Mos),
-(Q5Child:Q5aNumChild),
-(Q6aNumHI:Q12SmokeWake),
-YouthentryID, -DateofExtract, -ExtractorName,
-Q1aOtherGenderText, -Tablet.y, -Primary,
-Q1Gender, -Q77GradesRepeat, -Q7AgeFirstMeds)
cont.df <- select(df, -caseID, -race, -gender)
load("/Users/beperron/Git/mijj/RObjectsAnalysis/record.RData")
ls()
dim(record.df)
library(png)
install.packages("png")
install.packages("grid")
setwd("~/Git/BibWrangleR/Files2Process")
source('~/.active-rstudio-document', echo=TRUE)
ls()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ls()
